{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Iona",
	"extensions": [".iona"],
	"patterns": [
		{
			"include": "#keywords"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#typedefs"
		},
		{
			"include": "#comments"
		},
		{
			"include": "#functions"
		},
		{
			"include": "#visibility"
		}
	],
	"repository": {
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.iona",
					"match": "\\b(if|while|for|return|match)\\b"
				},
				{
					"name": "keyword.class.iona",
					"match": "\\b(class)\\b"
				},
				{
					"name": "keyword.struct.iona",
					"match": "\\bstruct\\b"
				},
				{
					"name": "keyword.contract.iona",
					"match": "\\bcontract\\b"
				},
				{
					"name": "keyword.init.iona",
					"match": "\\binit\\b"
				},
				{
					"name": "keyword.var.iona",
					"match": "\\bvar\\b"
				},
				{
					"name": "keyword.let.iona",
					"match": "\\blet\\b"
				},
				{
					"name": "keyword.const.iona",
					"match": "\\bconst\\b"
				},
				{
					"name": "keyword.func.iona",
					"match": "\\b(fn)\\bs+(w+)\\(\\)\\b",
					"captures": {
						"1": {
							"name": "keyword.function.iona"
						},
						"2": {
							"name": "entity.name.function.iona"
						},
						"3": {
							"name": "entity.name.function.iona"
						}
					}
				},
				{
					"name": "keyword.use.iona",
					"match": "\\buse\\b"
				},
				{
					"name": "keyword.access.public.iona",
					"match": "\\bpublic\\b(?:\\s+(class|init|fn|var|let|const|op))?"
				},
				{
					"name": "keyword.access.private.iona",
					"match": "\\bprivate\\b(?:\\s+(class|init|fn|var|let|const|op))?"
				},
				{
					"name": "keyword.access.internal.iona",
					"match": "\\binternal\\b(?:\\s+(class|init|fn|var|let|const|op))?"
				},
				{
					"name": "keyword.access.open.iona",
					"match": "\\bopen\\b(?:\\s+(class|init|fn|var|let|const|op))?"
				},
				{
					"name": "keyword.access.override.iona",
					"match": "\\boverride\\b(?:\\s+(class|init|fn|var|let|const|op))?"
				}
			]
		},
		"strings": {
			"name": "string.quoted.double.iona",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.iona",
					"match": "\\\\."
				}
			]
		},
		"typedefs": {
			"patterns": [
				{
					"name": "variable.declaration.iona",
					"match": "(\\b(let|var|const)\\b)\\s+(\\w+)\\s*:\\s*(\\w+)",
					"captures": {
						"1": {
							"name": "keyword.declaration.iona"
						},
						"3": {
							"name": "variable.name.iona"
						},
						"4": {
							"name": "variable.type.iona"
						}
					}
				}
			]
		},

		"functions": {
			"patterns": [
				{
					"name": "keyword.modifier.open.iona",
					"match": "\\bopen\\b"
				},
				{
					"name": "keyword.declaration.class.iona",
					"match": "\\bclass\\b"
				},
				{
					"name": "entity.name.class.iona",
					"match": "(?<=\\bclass\\s)\\w+"
				},
				{
					"name": "entity.name.class.inherited.iona",
					"match": "(?<=:\\s*)\\w+",
					"comment": "Matches the inherited class name in a class declaration"
				},
				{
					"name": "keyword.function.iona",
					"match": "\\bfn\\b"
				},
				{
					"name": "keyword.parameter.iona",
					"match": "\\b\\w+\\s*(?=:\\s*\\w+\\b)"
				},
				{
					"name": "storage.type.iona",
					"match": "\\b\\w+\\s*(?=:\\s*\\w+\\b)"
				},
				{
					"name": "entity.name.parameter.iona",
					"match": "\\w+(?=\\s*:)",
					"comment": "Matches parameter names"
				},
				{
					"name": "keyword.type.iona",
					"match": "\\w+(?=:\\s*\\w+\\b)",
					"comment": "Matches parameter types"
				},
				{
					"name": "entity.name.function.iona",
					"match": "\\b(?:(?!init)\\w+)\\b"
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"name": "comment.line.double-slash.iona",
					"match": "//.*$"
				},
				{
					"name": "comment.block.iona",
					"begin": "/\\*",
					"end": "\\*/",
					"patterns": [
						{
							"match": ".*?(?=\\*/)","name": "comment.content.iona"
						}
					]
				}
			]
		}
	},
	"scopeName": "source.iona"
}
