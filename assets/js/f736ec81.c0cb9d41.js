"use strict";(self.webpackChunkIona_lang=self.webpackChunkIona_lang||[]).push([[932],{5890:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>c,toc:()=>d});var o=t(4848),s=t(8453);const i={sidebar_position:3,description:"Comments in Iona"},r="Comments",c={id:"guide/comments",title:"Comments",description:"Comments in Iona",source:"@site/docs/guide/comments.md",sourceDirName:"guide",slug:"/guide/comments",permalink:"/docs/guide/comments",draft:!1,unlisted:!1,editUrl:"https://github.com/broken-bytes/iona-lang/docs/guide/comments.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,description:"Comments in Iona"},sidebar:"tutorialSidebar",previous:{title:"Builtin Types",permalink:"/docs/guide/builtins"},next:{title:"Control flow",permalink:"/docs/guide/control-flow"}},l={},d=[{value:"Non-functional comments",id:"non-functional-comments",level:2},{value:"Documentation",id:"documentation",level:2}];function a(e){const n={code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"comments",children:"Comments"}),"\n",(0,o.jsx)(n.h2,{id:"non-functional-comments",children:"Non-functional comments"}),"\n",(0,o.jsx)(n.p,{children:"There are two different types of comments in Iona, singleline and multiline comments:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-Iona",children:"// Single line comment\n/*\n    Multiline comment\n    Another line\n*/\n"})}),"\n",(0,o.jsx)(n.h2,{id:"documentation",children:"Documentation"}),"\n",(0,o.jsx)(n.p,{children:"Comments also serve documentation purposes:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-Iona",children:"/**\n*   description: Adds a user to the list\n*   parameters:\n*       - user The user to be added\n*   returns: True on success, false on error\n*/\nfn add(user: User) -> Bool {\n    ...\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Documentation blocks are started with ",(0,o.jsx)(n.code,{children:"/**"})," (note the double ",(0,o.jsx)(n.code,{children:"*"}),"). They use regular markdown plus some extras to allow documentation for types.\nThese are the additional features for documentation:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Keywords:","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"description: Adds a description to the documentation of the type/function/property"}),"\n",(0,o.jsxs)(n.li,{children:["parameters: A list of parameters defined by ",(0,o.jsx)(n.code,{children:"name"})," ",(0,o.jsx)(n.code,{children:"Description"})]}),"\n",(0,o.jsx)(n.li,{children:"returns: Described the return value if a function"}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["Syntax:","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"@other Links to another type allowing to jump to it immediately."}),"\n"]}),"\n"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(a,{...e})}):a(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>c});var o=t(6540);const s={},i=o.createContext(s);function r(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);